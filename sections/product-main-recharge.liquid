{% comment %}
<!--
************************************************************************************
*
*  Product Page - Recharge (v9.3 - DEFINITIVE GRID CALLOUTS)
*  PROMO BREADCRUMB INTEGRATION - V3 FINAL
*  - All promo logic is correctly integrated into this file.
*
************************************************************************************
-->
{% endcomment %}

{%- liquid
  assign current_variant = product.selected_or_first_available_variant
  assign included_meals = product.metafields.custom.included_meals.value | default: product.metafields.custom.meal_plan_products.value
  assign has_subscriptions = false

  assign hero_hook     = product.metafields.plan.hook_line
  assign stat_cards    = product.metafields.plan.stat_cards_json.value
  assign who_for_list  = product.metafields.plan.who_for_list.value

  assign features_list   = product.metafields.plan.features_json.value
  assign assurances_list = product.metafields.plan.assurances_list.value

  if product.selling_plan_groups.size > 0
    assign has_subscriptions = true
  endif

  if features_list == blank
    assign features_list = shop.metafields.defaults.features_json.value
  endif
  if assurances_list == blank
    assign assurances_list = shop.metafields.defaults.assurances_list.value
  endif
  
  assign promo_end = settings.meal_plan_promo_end_date | default: ''
  assign promo_active = false
  if settings.meal_plan_promo_enable and settings.meal_plan_promo_pdp_enable
    assign now_ts = 'now' | date: '%s'
    assign end_ts = promo_end | date: '%s'
    if promo_end == blank or end_ts >= now_ts
      assign promo_active = true
    endif
  endif
-%}


<product-form-controller class="meal-plan-premium-layout" data-section-id="{{ section.id }}">
  <div class="meal-plan-hero-container">
    <div class="meal-plan-hero-grid">

      <div class="meal-plan-hero__info">
        <div class="meal-plan-hero__header">
          
          <!-- NEW: Wrapper for title and tag for proper alignment -->
          <div class="meal-plan-hero__title-wrapper">
            {%- assign display_title = product.metafields.custom.display_title | strip -%}
            <h1 class="meal-plan-hero__title">
              {%- if display_title != blank -%}
                {{- display_title | escape -}}
              {%- else -%}
                {{- product.title | escape -}}
              {%- endif -%}
            </h1>
            <!-- NEW: Stylish "Meal Plan" tag -->
            <span class="meal-plan-hero__tag">Meal Plan</span>
          </div>

          {%- if hero_hook != blank -%}
            <p class="meal-plan-hero__hook">{{ hero_hook }}</p>
          {%- endif -%}
        </div>
        
        {%- if product.description != blank -%}
          <div class="meal-plan-description rte">{{ product.description }}</div>
        {%- endif -%}

        {%- if who_for_list and who_for_list.size > 0 -%}
          <div class="meal-plan-target-audience">
            <h3 class="meal-plan-section-title">WHO IT'S FOR</h3>
            <ul class="meal-plan-target-audience__list">
              {%- for item in who_for_list -%}
                <li class="meal-plan-target-audience__item">
                  <span class="meal-plan-target-audience__icon-wrapper">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                  </span>
                  <span>{{ item }}</span>
                </li>
              {%- endfor -%}
            </ul>
          </div>
        {%- endif -%}

        {%- if features_list and features_list.size > 0 -%}
          <div class="meal-plan-features-grid">
            {%- for feature in features_list -%}
              <div class="meal-plan-feature-card">
                <h4 class="meal-plan-feature-card__title">{{ feature.title }}</h4>
                <p class="meal-plan-feature-card__subtitle">{{ feature.subtitle }}</p>
              </div>
            {%- endfor -%}
          </div>
        {%- endif -%}

        {%- if included_meals != blank -%}
          <div class="meal-plan-contents">
            <h3 class="meal-plan-section-title">WHAT'S IN YOUR PLAN</h3>
            <ul class="meal-plan-contents__list" data-dynamic-meal-list>
              {%- for meal in included_meals -%}
                <li>
                  <span class="meal-quantity-prefix"></span>
                  <span class="meal-title-text">{{- meal.title -}}</span>
                </li>
              {%- endfor -%}
            </ul>
            <p class="meal-plan-contents__disclaimer">Due to a routinely updating menu, subscription items in this meal plan are subject to change.</p>
          </div>
        {%- endif -%}
      </div>

      <div class="meal-plan-hero__form">
        <div class="meal-plan-form-card">
          <form method="post" action="/cart/add" accept-charset="UTF-8" class="product-form-recharge" data-product-form>

            <div class="form-step" data-order="1">
              <label for="Option-{{ section.id }}-0" class="form-step__label">
                <span class="form-step__number">1</span>
                {{ product.options_with_values[0].name }}
              </label>
              <div class="select-wrapper">
                <select id="Option-{{ section.id }}-0" name="{{ product.options_with_values[0].name }}" data-variant-selector>
                  {%- for value in product.options_with_values[0].values -%}
                    <option value="{{ value | escape }}" {% if product.options_with_values[0].selected_value == value %}selected="selected"{% endif %}>
                      {{ value }}
                    </option>
                  {%- endfor -%}
                </select>
                <svg class="select-wrapper__arrow" viewBox="0 0 24 24"><polyline points="6 9 12 15 18 9"></polyline></svg>
              </div>
            </div>

            <div class="form-step" data-order="2">
               <label class="form-step__label"><span class="form-step__number">2</span>Purchase Type</label>
               <div class="purchase-options" data-purchase-options-container>
                  <div class="purchase-options__option" data-purchase-option="one-time">
                    <input type="radio" id="purchase-type-one-time-{{ section.id }}" name="purchase_type" value="one-time" {% if has_subscriptions == false %}checked{% endif %}>
                    <label for="purchase-type-one-time-{{ section.id }}">
                      <span class="purchase-options__title">One-Time Purchase</span>
                      <span class="purchase-options__price" data-one-time-price></span>
                    </label>
                  </div>
                  <div class="purchase-options__option" data-purchase-option="subscribe">
                    <input type="radio" id="purchase-type-subscribe-{{ section.id }}" name="purchase_type" value="subscribe" {% if has_subscriptions %}checked{% endif %}>
                    <label for="purchase-type-subscribe-{{ section.id }}">
                      <span class="purchase-options__title">
                        Subscribe & Save
                        {% if promo_active %}<span class="mp-promo-pill mp-promo-element">{{ settings.meal_plan_promo_name }} bonus in cart</span>{% endif %}
                      </span>
                      <span class="purchase-options__price" data-subscribe-price></span>
                    </label>
                  </div>
               </div>
               {% if promo_active %}
               <div class="mp-promo-details mp-promo-element">
                 <small class="mp-promo-micro">Extra savings apply in cart, on top of Subscribe & Save.</small>
                 <small class="mp-promo-preview">{{ settings.meal_plan_promo_name }} savings applied in cart.</small>
                 <small class="mp-promo-deadline">Ends {{ settings.meal_plan_promo_end_date | date: '%b %-d' }}.</small>
               </div>
               {% endif %}
            </div>

            <div class="form-step" data-selling-plan-selector-container data-order="3">
                <label class="form-step__label"><span class="form-step__number">3</span>Delivery Frequency</label>
                <div class="selling-plan-grid" data-selling-plan-grid></div>
                <select name="selling_plan" data-selling-plan-select hidden></select>
            </div>

            <input type="hidden" name="id" value="{{ current_variant.id }}" data-variant-id-input>
            
            <div class="product-form-recharge__footer" data-order="4">
              <div class="product-form-recharge__actions">
                <div class="integrated-quantity">
                  <button type="button" class="integrated-quantity__button" name="minus" aria-label="{{ 'products.product.quantity_decrease' | t }}" data-quantity-minus>－</button>
                  <input class="integrated-quantity__input" type="number" name="quantity" value="1" min="1" aria-label="Quantity" readonly>
                  <span class="integrated-quantity__text" aria-live="polite" data-quantity-input>1</span>
                  <button type="button" class="integrated-quantity__button" name="plus" aria-label="{{ 'products.product.quantity_increase' | t }}" data-quantity-plus>＋</button>
                </div>
                <button type="submit" name="add" class="button button--primary product-form-recharge__add-btn" data-add-to-cart-button>
                  <span data-add-to-cart-text>Add to Cart</span>
                </button>
              </div>
            </div>

            <div class="rc-widget-injection-parent"></div>
          </form>
        </div>
      </div>
    </div>
  </div>

  {%- if assurances_list and assurances_list.size > 0 -%}
    <div class="meal-plan-assurances">
      {%- for assurance in assurances_list -%}
        <div class="meal-plan-assurance">
          <span>{{ assurance }}</span>
        </div>
      {%- endfor -%}
    </div>
  {%- endif -%}

  {% render 'meal-plan-grid', product: product %}

  <script type="application/json" data-product-json>{{ product | json }}</script>
  <script type="application/json" data-selling-plans-json>{{ product.selling_plan_groups | json }}</script>
  <script type="application/json" data-included-meals-json>{%- if included_meals != blank -%}{{ included_meals | map: 'title' | json }}{%- else -%}[]{%- endif -%}</script>
</product-form-controller>

{%- render 'footer-minimal-ordering' -%}

{% comment %} ==================================================================================== {% endcomment %}
{% comment %} SCRIPT: MODIFIED - Removed injection logic and fixed update logic. {% endcomment %}
{% comment %} ==================================================================================== {% endcomment %}

<script>
class ProductFormController extends HTMLElement {
  constructor() {
    super();
    this.productData = JSON.parse(this.querySelector('[data-product-json]').textContent);
    this.sellingPlanGroups = JSON.parse(this.querySelector('[data-selling-plans-json]').textContent);
    this.includedMeals = JSON.parse(this.querySelector('[data-included-meals-json]').textContent);
    this.form = this.querySelector('[data-product-form]');
    this.variantSelector = this.querySelector('[data-variant-selector]');
    this.purchaseOptionsContainer = this.querySelector('[data-purchase-options-container]');
    this.sellingPlanSelectorContainer = this.querySelector('[data-selling-plan-selector-container]');
    this.sellingPlanGrid = this.querySelector('[data-selling-plan-grid]');
    this.sellingPlanSelect = this.querySelector('[data-selling-plan-select]');
    this.subscribeRadio = this.querySelector('input[value="subscribe"]');
    this.variantIdInput = this.querySelector('[data-variant-id-input]');
    this.quantityInput = this.querySelector('[data-quantity-input]');
    this.oneTimePriceDisplay = this.querySelector('[data-one-time-price]');
    this.subscribePriceDisplay = this.querySelector('[data-subscribe-price]');
    this.addToCartButton = this.querySelector('[data-add-to-cart-button]');
    this.dynamicMealList = this.querySelector('[data-dynamic-meal-list]');
    
    this.addToCartButton.addEventListener('click', this.onAddToCartClick.bind(this));
    
    this.variantSelector.addEventListener('change', this.updateUI.bind(this));
    this.purchaseOptionsContainer.addEventListener('change', this.updateUI.bind(this));
    this.sellingPlanGrid.addEventListener('click', this.onSellingPlanGridClick.bind(this));
  }

  connectedCallback() {
    this.initQuantityButtons();
    this.updateUI();
  }

  async onAddToCartClick(evt) {
    evt.preventDefault();
    this.setLoading(true);
    
    const formData = new FormData(this.form);
    formData.delete('purchase_type');
    if (this.querySelector('input[value="one-time"]:checked')) {
      formData.delete('selling_plan');
    }
    
    try {
      const response = await fetch('/cart/add.js', { method: 'POST', body: formData });
      if (!response.ok) throw new Error(await response.text());
      const cart = await response.json();
      document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
      this.setSuccess();
    } catch (error) {
      console.error('Cart Submission Error:', error);
      this.revertButton();
    }
  }

  setLoading(isLoading) {
    this.addToCartButton.classList.toggle('is-loading', isLoading);
    this.addToCartButton.disabled = isLoading;
  }

  setSuccess() {
    this.addToCartButton.classList.remove('is-loading');
    this.addToCartButton.classList.add('is-added');
    setTimeout(() => this.revertButton(), 2000);
  }

  revertButton() {
    this.addToCartButton.classList.remove('is-added');
    this.addToCartButton.classList.remove('is-loading');
    const currentVariant = this.getSelectedVariant();
    this.addToCartButton.disabled = currentVariant ? !currentVariant.available : true;
  }
  
  updateUI() {
    const selectedVariant = this.getSelectedVariant();
    if (!selectedVariant) return;

    const purchaseType = this.querySelector('input[name="purchase_type"]:checked').value;
    this.variantIdInput.value = selectedVariant.id;
    this.updateMealQuantities(selectedVariant);

    const allocations = selectedVariant.selling_plan_allocations;
    const subscribeOption = this.querySelector('[data-purchase-option="subscribe"]');

    if (allocations && allocations.length > 0) {
      subscribeOption.hidden = false;
      this.oneTimePriceDisplay.textContent = this.formatMoney(selectedVariant.price);
      const selectedPlanId = this.sellingPlanSelect.value;
      this.populateSellingPlans(selectedVariant, selectedPlanId);

      const selectedSellingPlan = this.getSelectedSellingPlan(selectedVariant);
      if (selectedSellingPlan) {
        this.subscribePriceDisplay.textContent = this.formatMoney(selectedSellingPlan.price);
      }
      
      const showPlans = purchaseType === 'subscribe' && selectedSellingPlan;
      this.sellingPlanSelectorContainer.style.display = showPlans ? 'block' : 'none';
    } else {
      subscribeOption.hidden = true;
      this.sellingPlanSelectorContainer.style.display = 'none';
      this.querySelector('input[value="one-time"]').checked = true;
    }

    const promoEls = this.querySelectorAll('.mp-promo-element');
    if (promoEls) {
      promoEls.forEach(el => { el.style.display = purchaseType === 'subscribe' ? '' : 'none'; });
    }

    this.addToCartButton.disabled = !selectedVariant.available;
  }

  updateMealQuantities(variant) {
    if (!this.includedMeals || this.includedMeals.length === 0) return;
    
    const totalMeals = parseInt(variant.option1.split(' ')[0], 10);
    const numMealTypes = this.includedMeals.length;
    
    if (isNaN(totalMeals) || numMealTypes === 0) return;

    const quantityPerMeal = totalMeals / numMealTypes;
    const allCallouts = document.querySelectorAll('[data-meal-quantity-callout]');
    
    if (Number.isInteger(quantityPerMeal) && quantityPerMeal > 0) {
      const flashDuration = 400;

      if (allCallouts) {
        allCallouts.forEach(callout => {
          callout.textContent = `${quantityPerMeal}x`;
          callout.style.display = 'flex';
          callout.classList.add('is-updating');
          setTimeout(() => callout.classList.remove('is-updating'), flashDuration);
        });
      }

      if (this.dynamicMealList) {
        let newListHtml = '';
        this.includedMeals.forEach(mealTitle => {
          newListHtml += `<li><span class="meal-quantity-prefix">${quantityPerMeal}x</span><span class="meal-title-text">${mealTitle}</span></li>`;
        });
        this.dynamicMealList.innerHTML = newListHtml;
        this.dynamicMealList.querySelectorAll('.meal-quantity-prefix').forEach(prefix => {
          prefix.classList.add('is-updating');
          setTimeout(() => prefix.classList.remove('is-updating'), flashDuration);
        });
      }
    } else {
      if (allCallouts) {
        allCallouts.forEach(callout => callout.style.display = 'none');
      }
    }
  }
  
  populateSellingPlans(e,t=null){this.sellingPlanGrid.innerHTML="",this.sellingPlanSelect.innerHTML="";const s=e.selling_plan_allocations;s.forEach(((i,n)=>{const a=this.sellingPlanGroups.find((r=>r.id===i.selling_plan_group_id));if(!a)return;const l=a.selling_plans.find((r=>r.id===i.selling_plan_id));if(!l)return;const c=document.createElement("option");c.value=l.id,c.textContent=l.name,this.sellingPlanSelect.appendChild(c);const o=document.createElement("button");o.type="button",o.className="selling-plan-grid__button",o.dataset.planId=l.id,o.textContent=l.name.replace("Every ","").replace(" week","w").replace("s",""),this.sellingPlanGrid.appendChild(o),t&&t==l.id?(o.classList.add("is-active"),c.selected=!0):t||0!==n||(o.classList.add("is-active"),c.selected=!0)}))}
  onSellingPlanGridClick(e){const t=e.target.closest(".selling-plan-grid__button");t&&(this.querySelectorAll(".selling-plan-grid__button").forEach((s=>s.classList.remove("is-active"))),t.classList.add("is-active"),this.sellingPlanSelect.value=t.dataset.planId,this.subscribeRadio.checked=!0,this.updateUI())}
  initQuantityButtons(){const e=this.querySelector("[data-quantity-minus]"),t=this.querySelector("[data-quantity-plus]"),s=this.querySelector("[data-quantity-input]");if(!e||!t||!s)return;const i=this.querySelector('.integrated-quantity__input[name="quantity"]'),n=()=>{let a=parseInt(i.value,10);s.textContent=a};i.addEventListener("change",n),e.addEventListener("click",(()=>{let a=parseInt(i.value,10);a>1&&(a--,i.value=a,i.dispatchEvent(new Event("change")))})),t.addEventListener("click",(()=>{let a=parseInt(i.value,10);a++,i.value=a,i.dispatchEvent(new Event("change"))})),n()}
  getSelectedVariant(){const e=this.variantSelector.value;return this.productData.variants.find((t=>t.option1===e))}
  getSelectedSellingPlan(e){const t=this.sellingPlanSelect.value;return e.selling_plan_allocations.find((s=>s.selling_plan_id==t))||e.selling_plan_allocations[0]}
  formatMoney(e){return`$${(e/100).toFixed(2)}`}
}
customElements.define('product-form-controller', ProductFormController);
</script>

<style>
  product-form-controller {
    display: block;
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
  }
  .meal-plan-hero__info,
  .meal-plan-hero__form {
    min-width: 0;
  }

  :root {
    --brand-primary: #10B981;
    --brand-primary-light: #D1FAE5;
    --brand-primary-dark: #047857;
    --brand-accent-red: #EF4444;
    --color-text: #1F2937;
    --color-text-light: #6B7280;
    --color-border: #E5E7EB;
    --color-background: #F9FAFB;
    --color-surface: #FFFFFF;
    --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
    --radius-md: 8px;
    --radius-lg: 12px;
  }

  .meal-plan-hero-grid { display: grid; grid-template-columns: minmax(0, 1fr); gap: 2.5rem; align-items: flex-start; }
  .meal-plan-hero-grid > * { min-width: 0; }
  @media (min-width: 990px) {
    .meal-plan-hero-grid { grid-template-columns: minmax(0, 1.2fr) minmax(0, 1fr); gap: 4rem; }
    .meal-plan-hero__form { position: sticky; top: 2rem; }
  }

  .meal-plan-hero__info {
    display: flex;
    flex-direction: column;
    gap: 2.5rem;
  }
  .meal-plan-section-title { font-size: 0.875rem; font-weight: 700; color: var(--color-text); text-transform: uppercase; letter-spacing: 0.05em; margin: 0 0 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid var(--color-border); }
  
  .meal-plan-hero__header { display: flex; flex-direction: column; gap: 0.25rem; }
  .meal-plan-hero__title-wrapper {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.75rem;
    row-gap: 0.25rem;
  }
  .meal-plan-hero__title { font-size: 2.5rem; line-height: 1.2; margin: 0; }
  .meal-plan-hero__tag {
    display: inline-flex;
    align-items: center;
    background-color: var(--brand-accent-red);
    color: white;
    font-size: 0.75rem;
    font-weight: 700;
    line-height: 1;
    text-transform: uppercase;
    letter-spacing: 0.06em;
    padding: 0.4em 0.8em;
    border-radius: 999px;
    white-space: nowrap;
    transform: translateY(-2px);
    transition: transform 0.2s ease-out;
  }
  .meal-plan-hero__hook { font-size: 1.25rem; font-weight: 500; color: var(--color-text-light); margin: 0; }
  .meal-plan-description.rte { font-size: 1rem; line-height: 1.6; color: var(--color-text-light); }
  
  @media (max-width: 480px) {
    .meal-plan-hero__title { font-size: 2rem; }
    .meal-plan-hero__tag { font-size: 0.7rem; transform: translateY(0); }
    .meal-plan-hero__title-wrapper { gap: 0.5rem; }
  }

  .meal-plan-target-audience { margin: 0; padding: 0; background-color: transparent; border: none; }
  .meal-plan-target-audience__list { list-style: none; margin: 0; padding: 0; display: flex; flex-direction: column; gap: 0.75rem; }
  .meal-plan-target-audience__item { 
    display: flex; 
    align-items: center;
    background-color: var(--color-background); 
    border: 1px solid var(--color-border); 
    border-radius: var(--radius-md); 
    padding: 0.75rem 1rem; 
    font-weight: 500;
  }
  .meal-plan-target-audience__icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    margin-right: 1rem;
    background-color: var(--brand-primary-dark);
    color: var(--color-surface);
  }

  .meal-plan-features-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 1rem; }
  .meal-plan-feature-card { background-color: var(--color-surface); border: 1px solid var(--color-border); border-radius: var(--radius-md); padding: 1.25rem; text-align: left; }
  .meal-plan-feature-card__title { font-size: 1rem; font-weight: 600; margin: 0 0 0.25rem; }
  .meal-plan-feature-card__subtitle { font-size: 0.875rem; color: var(--color-text-light); margin: 0; }

  @keyframes qty-flash { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.2); } }
  .meal-quantity-prefix.is-updating { animation: qty-flash 400ms ease-out; }
  .meal-plan-contents__list { list-style: none; margin:0; padding:0; display: flex; flex-direction: column; gap: 0.75rem; }
  .meal-plan-contents__list li { display: flex; align-items: center; background-color: var(--color-background); border: 1px solid var(--color-border); border-radius: var(--radius-md); padding: 0.75rem 1rem; }
  .meal-quantity-prefix { display: flex; align-items: center; justify-content: center; flex-shrink: 0; width: 36px; height: 36px; font-size: 1rem; font-weight: 700; color: var(--brand-primary-dark); background-color: var(--brand-primary-light); border-radius: 50%; margin-right: 1rem; }
  .meal-title-text { font-weight: 500; }
  .meal-plan-contents__disclaimer { font-size: 0.8rem; font-style: italic; color: var(--color-text-light); margin-top: 1rem; }
  .meal-plan-quantity-callout { display: none; position: absolute; top: 10px; right: 10px; width: 40px; height: 40px; font-size: 1.1rem; font-weight: 700; color: white; background-color: var(--brand-primary); border-radius: 50%; z-index: 2; pointer-events: none; align-items: center; justify-content: center; box-shadow: var(--shadow-sm); }
  .meal-plan-quantity-callout.is-updating { animation: qty-flash 400ms ease-in-out; }

  .meal-plan-items__grid-item {
    position: relative;
  }

  .meal-plan-form-card { background: var(--color-surface); border-radius: var(--radius-lg); border: 1px solid var(--color-border); box-shadow: var(--shadow-md); padding: 1.5rem; }
  @media (min-width: 768px) { .meal-plan-form-card { padding: 2rem; } }
  .product-form-recharge { display: flex; flex-direction: column; gap: 1.5rem; }
  .form-step__label { display: flex; align-items: center; gap: 0.75rem; font-size: 1rem; font-weight: 600; margin-bottom: 0.75rem; }
  .form-step__number { display: flex; align-items: center; justify-content: center; width: 24px; height: 24px; font-size: 0.875rem; font-weight: 700; background-color: var(--color-text); color: var(--color-surface); border-radius: 50%; }
  
  .select-wrapper { position: relative; }
  .select-wrapper select { width: 100%; appearance: none; -webkit-appearance: none; background-color: var(--color-background); border: 1px solid var(--color-border); border-radius: var(--radius-md); padding: 0.8rem 2.5rem 0.8rem 1rem; font-size: 1rem; font-weight: 500; cursor: pointer; transition: border-color 0.2s, box-shadow 0.2s; }
  .bold_option_element select { width: 100%; max-width: 100%; }
  .select-wrapper select:focus { outline: none; border-color: var(--brand-primary); box-shadow: 0 0 0 2px var(--brand-primary-light); }
  .select-wrapper__arrow { position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); pointer-events: none; color: var(--color-text-light); width: 16px; height: 16px; }

  .purchase-options {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }
  .purchase-options__option input[type=radio] {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }
  .purchase-options__option label {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    padding: 0.75rem 1rem;
    border: 2px solid var(--color-border);
    background-color: var(--color-surface);
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: all 0.2s ease-in-out;
    height: 100%;
  }
  .purchase-options__option input[type=radio]:checked + label {
    border-color: var(--brand-primary);
    background-color: var(--brand-primary-light);
  }
  .purchase-options__title {
    font-weight: 600;
    font-size: 0.9rem;
    color: var(--color-text);
  }
  .purchase-options__price {
    font-weight: 700;
    font-size: 1.1rem;
    margin-top: 0.25rem;
    color: var(--color-text);
  }
  [data-purchase-option=subscribe] input[type=radio]:checked + label .purchase-options__title,
  [data-purchase-option=subscribe] input[type=radio]:checked + label .purchase-options__price {
    color: var(--brand-primary-dark);
  }

  .mp-promo-pill{display:inline-block;margin-left:.5rem;background:#f8d7da;color:#721c24;font-size:.75rem;padding:.15rem .5rem;border-radius:999px}
  .mp-promo-details{margin-top:.5rem;text-align:center}
  .mp-promo-details small{display:block;font-size:.75rem;color:#495057}

  .selling-plan-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(70px, 1fr)); gap: 0.5rem; }
  .selling-plan-grid__button { appearance: none; -webkit-appearance: none; background-color: var(--color-background); border: 1px solid var(--color-border); border-radius: var(--radius-md); padding: 0.75rem 0.5rem; font-size: 0.875rem; font-weight: 600; color: var(--color-text-light); cursor: pointer; transition: all 0.2s ease-in-out; text-align: center; }
  .selling-plan-grid__button.is-active { background-color: var(--brand-primary-light); border-color: var(--brand-primary); color: var(--brand-primary-dark); }

  .product-form-recharge__footer { border-top: 1px solid var(--color-border); padding-top: 1.5rem; }
  .product-form-recharge__actions { display: grid; grid-template-columns: 120px 1fr; gap: 0.75rem; align-items: center; width: 100%; }
  .integrated-quantity { display: flex; align-items: center; justify-content: space-between; background: var(--brand-primary); border-radius: var(--radius-md); }
  .integrated-quantity__button { border: none; background: transparent; color: white; font-size: 1.25rem; font-weight: 400; line-height: 1; padding: 0.75rem; cursor: pointer; transition: opacity 0.2s; }
  .integrated-quantity__button:hover { opacity: 0.75; }
  .integrated-quantity__text { font-size: 1rem; font-weight: 700; color: white; }
  .integrated-quantity__input { display: none; }
  .button.button--primary { background-color: var(--brand-primary); color: white; border: 1px solid transparent; border-radius: var(--radius-md); padding: 0.85rem 1.5rem; font-size: 1rem; font-weight: 600; text-align: center; cursor: pointer; transition: background-color 0.2s; }
  .button.button--primary:hover:not(:disabled) { background-color: var(--brand-primary-dark); }
  .button:disabled { background-color: #D1D5DB; border-color: #D1D5DB; cursor: not-allowed; }
  .button.is-added { background-color: var(--brand-primary-dark); }
  .button.is-added span::before { content: '✓ '; }

  .rc-widget-injection-parent > .rc-widget, .rc-template { display:none!important; }
  .meal-plan-assurances { display: flex; flex-wrap: wrap; justify-content: center; gap: 1rem; margin: 3rem 0; padding: 1.5rem; background-color: var(--color-background); border-radius: var(--radius-lg); }
  .meal-plan-assurance { flex: 1 1 180px; text-align: center; font-size: 0.9rem; font-weight: 500; color: var(--color-text-light); }

  .collection-header-section-v8__cart-count {
    color: #000000 !important;
  }
</style>

{% schema %}
{
  "name": "Product Page (Recharge)",
  "tag": "section"
}
{% endschema %}