<!-- ai-chat-interface.liquid -->
<div class="chat-page">
  <div class="chat-container">
    <!-- Initial Prompt -->
    <div class="chat-start" id="chat-start">
      <h1 class="chat-title">Ask us a question</h1>
    </div>
    <!-- Chat Window (hidden initially) -->
    <div class="chat-window" id="chat-window">
      <!-- Messages will be dynamically injected here -->
    </div>
    <!-- Chat Input Area -->
    <div class="chat-input-container">
      <textarea id="chat-input" class="chat-input" placeholder="Type your message..."></textarea>
      <button id="chat-send-btn" class="chat-send-btn" aria-label="Send Message">
        <!-- Send Button Icon -->
        <svg fill="#ffffff" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
          <path d="M2 3l20 9-20 9v-6l14-3-14-3z"></path>
        </svg>
      </button>
    </div>
  </div>
</div>

<!-- Include Marked.js for Markdown parsing -->
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<!-- Include DOMPurify for sanitizing HTML -->
<script src="https://cdn.jsdelivr.net/npm/dompurify@2.4.0/dist/purify.min.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const sendButton = document.getElementById('chat-send-btn');
    const chatInput = document.getElementById('chat-input');
    const chatWindow = document.getElementById('chat-window');
    const chatStart = document.getElementById('chat-start');
    let conversationStarted = false;

    // Configure Marked.js options
    marked.setOptions({
      breaks: true,
      gfm: true,
    });

    // Function to append a message to the chat window
    function appendMessage(content, className) {
      if (!conversationStarted) {
        conversationStarted = true;
        chatStart.style.display = 'none';
        chatWindow.style.display = 'flex';
      }

      const message = document.createElement('div');
      message.className = `chat-message ${className}`;

      if (className === 'ai-message') {
        // Parse Markdown to HTML and sanitize
        const rawHtml = marked.parse(content);
        const sanitizedHtml = DOMPurify.sanitize(rawHtml);
        message.innerHTML = sanitizedHtml;
      } else {
        // For user and error messages, escape HTML
        message.textContent = content;
      }

      chatWindow.appendChild(message);

      // Scroll to the bottom as new messages are added
      chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    // Typing indicator
    let typingIndicator;
    function showTypingIndicator() {
      typingIndicator = document.createElement('div');
      typingIndicator.className = 'chat-message ai-message typing-indicator';
      typingIndicator.innerHTML = `
        <span class="typing-dot"></span>
        <span class="typing-dot"></span>
        <span class="typing-dot"></span>
      `;
      chatWindow.appendChild(typingIndicator);

      // Scroll to the bottom as new messages are added
      chatWindow.scrollTop = chatWindow.scrollHeight;
    }

    function hideTypingIndicator() {
      if (typingIndicator) {
        chatWindow.removeChild(typingIndicator);
        typingIndicator = null;
      }
    }

    // Function to send user message and receive AI response
    async function sendMessage() {
      const userInput = chatInput.value.trim();
      if (!userInput) return;

      // Append user message
      appendMessage(userInput, 'user-message');

      // Clear input field
      chatInput.value = '';
      chatInput.focus();

      // Show typing indicator
      showTypingIndicator();

      try {
        const response = await fetch('https://shopify-ai-assistant.uc.r.appspot.com/ask', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({ message: userInput }),
});

        // Hide typing indicator
        hideTypingIndicator();

        if (response.ok) {
          const data = await response.json();
          appendMessage(data.response, 'ai-message');
        } else {
          // Log error and show friendly message
          console.error('Error: ', await response.text());
          throw new Error(`HTTP Error: ${response.status}`);
        }
      } catch (error) {
        console.error('Error:', error);
        hideTypingIndicator();
        appendMessage('Oops! Something went wrong. Please try again.', 'error-message');
      }
    }

    // Event listener for send button
    sendButton.addEventListener('click', sendMessage);

    // Event listener for Enter key (with Shift for new lines)
    chatInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage();
      }
    });
  });
</script>

<style>
  /* Reset default styles */
  body, html {
    margin: 0;
    padding: 0;
    height: 100%;
    font-family: {{ section.settings.font_family }};
  }

  /* Adjust the height of the chat-page */
.chat-page {
  height: 70vh; /* Reduced height from 100vh to 70vh */
  background: #ffffff;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* Ensure the chat-container adjusts proportionally */
.chat-container {
  width: 100%;
  max-width: 800px;
  height: 100%; /* Still inherits from .chat-page, so it's now 70vh */
  display: flex;
  flex-direction: column;
  background: #ffffff;
  padding: 20px;
  box-sizing: border-box;
}

/* Initial Prompt */
.chat-start {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1; /* Allows it to take available space proportionally */
}

.chat-title {
  font-size: 28px;
  font-weight: bold;
  color: #333;
  margin: 0;
}

/* Chat Window */
.chat-window {
  display: none; /* Hidden initially */
  flex-direction: column;
  overflow-y: auto;
  flex-grow: 1; /* Dynamically takes up remaining vertical space */
  margin-bottom: 20px;
}


  /* Chat Messages */
  .chat-message {
    max-width: 100%;
    margin-bottom: 12px;
    padding: 12px 16px;
    border-radius: 12px;
    font-size: 16px;
    line-height: 1.6;
    word-wrap: break-word;
    animation: fadeIn 0.2s ease-in-out;
  }

  .user-message {
    background: {{ section.settings.user_message_color }};
    color: white;
    align-self: flex-end;
    border-bottom-right-radius: 0;
  }

  .ai-message {
    background: {{ section.settings.ai_message_color }};
    color: #333;
    align-self: flex-start;
    border-bottom-left-radius: 0;
  }

  /* Images in Messages */
  .chat-message img {
    max-width: 400px;
    width: 100%;
    height: auto;
    display: block;
    margin-top: 10px;
    border-radius: 8px;
  }

  /* Typing Indicator */
  .typing-indicator {
    display: flex;
    align-items: center;
    background: {{ section.settings.ai_message_color }};
    border-radius: 12px;
    padding: 12px 16px;
    align-self: flex-start;
    border-bottom-left-radius: 0;
  }

  .typing-dot {
    width: 8px;
    height: 8px;
    margin: 0 2px;
    background-color: #ccc;
    border-radius: 50%;
    animation: typing 1s infinite;
  }

  .typing-dot:nth-child(1) {
    animation-delay: 0s;
  }

  .typing-dot:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-dot:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0% {
      opacity: 0.2;
    }
    20% {
      opacity: 1;
    }
    100% {
      opacity: 0.2;
    }
  }

  /* Error Message */
  .error-message {
    background: {{ section.settings.error_message_color }};
    color: #721c24;
    align-self: flex-start;
    border-bottom-left-radius: 0;
  }

  /* Chat Input Area */
  .chat-input-container {
    display: flex;
    align-items: center;
    background: #f9f9f9;
    padding: 20px; /* Increased padding from 10px to 20px */
    border-radius: 12px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    margin-bottom: 100px; /* Changed from 40px to 100px to position 100px above */
  }

  .chat-input {
    flex: 1;
    border: none;
    border-radius: 8px;
    padding: 12px 16px;
    font-size: 16px;
    margin-right: 10px;
    resize: none;
    background: #fff;
    box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    height: 48px;
  }

  .chat-input:focus {
    outline: none;
    border-color: {{ section.settings.header_background_color }};
  }

  .chat-send-btn {
    background: {{ section.settings.header_background_color }};
    border: none;
    border-radius: 8px;
    width: 48px;
    height: 48px;
    display: flex;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    transition: background 0.3s ease;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
  }

  .chat-send-btn:hover {
    background: {{ section.settings.header_background_color_hover }};
  }

  .chat-send-btn svg {
    width: 24px;
    height: 24px;
  }

  /* Animation */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .chat-container {
      max-width: 100%;
      padding: 20px;
    }

    .chat-input {
      font-size: 14px;
      padding: 10px 14px;
      height: 40px;
    }

    .chat-send-btn {
      width: 40px;
      height: 40px;
    }

    .chat-send-btn svg {
      width: 20px;
      height: 20px;
    }

    .chat-title {
      font-size: 24px;
    }
  }
</style>

{% schema %}
{
  "name": "AI Chat Interface",
  "settings": [
    {
      "type": "color",
      "id": "header_background_color",
      "label": "Primary Color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "header_background_color_hover",
      "label": "Primary Color (Hover)",
      "default": "#0056b3"
    },
    {
      "type": "color",
      "id": "user_message_color",
      "label": "User Message Background Color",
      "default": "#007bff"
    },
    {
      "type": "color",
      "id": "ai_message_color",
      "label": "AI Message Background Color",
      "default": "#e9ecef"
    },
    {
      "type": "color",
      "id": "error_message_color",
      "label": "Error Message Background Color",
      "default": "#f8d7da"
    },
    {
      "type": "text",
      "id": "font_family",
      "label": "Font Family",
      "default": "Helvetica Neue, Helvetica, Arial, sans-serif"
    }
  ],
  "presets": [
    {
      "name": "AI Chat Interface",
      "category": "Custom"
    }
  ]
}
{% endschema %}
