{% comment %}
  SECTION: Product Main Meal Plan (v4.2 - DIVIDER FIX)
  - DIVIDER FIX: Removed the redundant horizontal divider.
  REVISED: Updated price display logic to show before/after pricing for discounted variants.
{% endcomment %}

{%- liquid
  assign current_variant = product.selected_or_first_available_variant | default: product.first_available_variant
  assign current_item_in_cart = cart.items | where: 'variant_id', current_variant.id | first
  assign qty_in_cart = current_item_in_cart.quantity | default: 0
  assign included_meals = product.metafields.custom.included_meals.value | default: product.metafields.custom.meal_plan_products.value
-%}

<style>
  .meal-plan-form__price del {
    color: #6c757d;
    font-weight: 400;
    margin-right: 8px;
    opacity: 0.8;
  }
</style>

<div class="meal-plan-premium-layout">
  
  <div class="meal-plan-hero-container">
    <div class="meal-plan-hero-grid">

      {% comment %} --- LEFT COLUMN: INFO --- {% endcomment %}
      <div class="meal-plan-hero__info">
        <h1 class="meal-plan-hero__title">{{ product.title }}</h1>

        {%- if product.description != blank -%}
          <div class="meal-plan-description rte">
            {{ product.description }}
          </div>
        {%- endif -%}

        {%- if included_meals != blank -%}
          <div class="meal-plan-contents">
            <h3 class="meal-plan-contents__title">What's In Your Plan</h3>
            <ul class="meal-plan-contents__list" data-dynamic-meal-list>
              {%- assign num_meal_types = included_meals | size -%}
              {%- assign total_meals = current_variant.option1 | split: ' ' | first | times: 1 -%}
              {%- assign qty_per_meal = total_meals | divided_by: num_meal_types -%}
              {%- for meal in included_meals -%}
                <li>
                  <span class="meal-quantity-prefix">{{ qty_per_meal }}x</span>
                  <span class="meal-title-text">{{- meal.title -}}</span>
                </li>
              {%- endfor -%}
            </ul>
            <p class="meal-plan-contents__disclaimer">
              Due to a routinely updating menu, subscription items in this meal plan are subject to change.
            </p>
          </div>
        {%- endif -%}
      </div>

      {% comment %} --- RIGHT COLUMN: FORM --- {% endcomment %}
      <div class="meal-plan-hero__form">
        <div class="meal-plan-form-card" data-main-product-form-container>
          <div class="meal-plan-form__options">
            {%- unless product.has_only_default_variant -%}
              {%- for option in product.options_with_values -%}
                <div class="meal-plan-form__option-group">
                  <label for="Option-{{ section.id }}-{{ forloop.index0 }}">{{ option.name }}</label>
                  <div class="select-wrapper">
                    <select id="Option-{{ section.id }}-{{ forloop.index0 }}" name="options[{{ option.name | escape }}]">
                      {%- for value in option.values -%}<option value="{{ value | escape }}" {% if option.selected_value == value %}selected="selected"{% endif %}>{{ value }}</option>{%- endfor -%}
                    </select>
                    <svg class="select-wrapper__arrow" viewBox="0 0 24 24"><polyline points="6 9 12 15 18 9"></polyline></svg>
                  </div>
                </div>
              {%- endfor -%}
            {%- endunless -%}

            <div class="rc-widget-injection-parent"></div>
            {% render 'recharge-bundle' %}
          </div>
          
          <div class="meal-plan-form__footer">
            <div class="meal-plan-form__price" data-product-price>
              {{ current_variant.price | money }}
            </div>
            {% render 'meal-plan-promo-breadcrumb', context: 'pdp' %}

            <div class="meal-plan-form__actions">
              <product-form class="product-form--quick-add product-form--full-width" data-state="{% if qty_in_cart > 0 %}active{% else %}initial{% endif %}">
                <input type="hidden" name="id" value="{{ current_variant.id }}" data-variant-id>
                
                <button type="button" class="product-card__add-btn alt-focus">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>
                  <span>Add</span>
                </button>

                <div class="integrated-quantity" data-product-id="{{ product.id }}">
                  <button type="button" class="integrated-quantity__button" name="minus" aria-label="Decrease quantity">－</button>
                  <span class="integrated-quantity__text" aria-live="polite">{{ qty_in_cart | default: 1 }}</span>
                  <input
                    is="quantity-input"
                    class="integrated-quantity__input"
                    type="number"
                    name="quantity"
                    value="{{ qty_in_cart }}"
                    min="0"
                    aria-label="Quantity"
                    data-quantity-input
                  >
                  <button type="button" class="integrated-quantity__button" name="plus" aria-label="Increase quantity">＋</button>
                </div>
              </product-form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  {% render 'meal-plan-grid', product: product %}

</div>

{%- render 'footer-minimal-ordering' -%}

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const productMain = document.querySelector('.meal-plan-premium-layout');
    if (!productMain) return;
    
    const formContainer = productMain.querySelector('[data-main-product-form-container]');
    if (!formContainer) return;

    const optionSelectors = formContainer.querySelectorAll('.meal-plan-form__option-group select');
    const productDataEl = document.querySelector('[data-product-json-{{ section.id }}]');
    const includedMealsDataEl = document.querySelector('[data-included-meals-json-{{ section.id }}]');
    const priceEl = formContainer.querySelector('[data-product-price]');
    const productFormCta = formContainer.querySelector('product-form');
    
    // New element selectors for dynamic quantities
    const dynamicMealList = productMain.querySelector('[data-dynamic-meal-list]');
    const quantityCallouts = document.querySelectorAll('[data-meal-quantity-callout]');

    if (productDataEl) {
      const productData = JSON.parse(productDataEl.textContent);
      const includedMeals = includedMealsDataEl ? JSON.parse(includedMealsDataEl.textContent) : [];
      
      const updateVariantId = () => {
        const selectedOptions = Array.from(optionSelectors).map(sel => sel.value);
        const matchedVariant = productData.variants.find(variant => {
          if (variant.options.length !== selectedOptions.length) return false;
          return variant.options.every((opt, idx) => opt === selectedOptions[idx]);
        });

        if (matchedVariant) {
          // Update Add to Cart form
          if (productFormCta) {
            const variantInput = productFormCta.querySelector('[data-variant-id]');
            if (variantInput) {
              variantInput.value = matchedVariant.id;
              variantInput.dispatchEvent(new Event('change', { bubbles: true }));
            }
            productFormCta.variantId = matchedVariant.id;
          }

          // Update price display
          if (priceEl) {
            const moneyFormat = {{ shop.money_format | json }};
            let priceHtml = '';
            if (matchedVariant.compare_at_price && matchedVariant.compare_at_price > matchedVariant.price) {
              const compareValue = (matchedVariant.compare_at_price / 100.0).toFixed(2);
              priceHtml += `<del>${moneyFormat.replace(/\{\{\s*amount\s*\}\}/, compareValue)}</del> `;
            }
            const value = (matchedVariant.price / 100.0).toFixed(2);
            priceHtml += `<span>${moneyFormat.replace(/\{\{\s*amount\s*\}\}/, value)}</span>`;
            priceEl.innerHTML = priceHtml;
          }
          
          // NEW: Update Meal Quantities
          if (includedMeals.length > 0) {
            const totalMeals = parseInt(matchedVariant.option1.split(' ')[0], 10);
            const numMealTypes = includedMeals.length;
            const qtyPerMeal = totalMeals / numMealTypes;
            const animationDuration = 400;

            if (Number.isInteger(qtyPerMeal) && qtyPerMeal > 0) {
              // Update and animate list
              if (dynamicMealList) {
                let listHtml = '';
                includedMeals.forEach(mealTitle => {
                  listHtml += `<li><span class="meal-quantity-prefix">${qtyPerMeal}x</span><span class="meal-title-text">${mealTitle}</span></li>`;
                });
                dynamicMealList.innerHTML = listHtml;
                dynamicMealList.querySelectorAll('.meal-quantity-prefix').forEach(prefix => {
                  prefix.classList.add('is-updating');
                  setTimeout(() => prefix.classList.remove('is-updating'), animationDuration);
                });
              }
              // Update and animate callouts
              if (quantityCallouts) {
                quantityCallouts.forEach(callout => {
                  callout.textContent = `${qtyPerMeal}x`;
                  callout.style.display = 'flex';
                  callout.classList.add('is-updating');
                  setTimeout(() => callout.classList.remove('is-updating'), animationDuration);
                });
              }
            }
          }
        }
      };
      
      optionSelectors.forEach(select => select.addEventListener('change', updateVariantId));
      if (optionSelectors.length > 0) {
        updateVariantId();
      }
    }

    const quickAddForm = formContainer.querySelector('.product-form--quick-add');
    const addBtn = quickAddForm?.querySelector('.product-card__add-btn');
    if (quickAddForm && addBtn) {
      quickAddForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        quickAddForm.classList.add('is-loading');
        addBtn.disabled = true;
        try {
          const formData = new FormData(quickAddForm);
          const res = await fetch('/cart/add.js', { method: 'POST', body: formData });
          if (!res.ok) throw new Error(await res.text());
          const cart = await res.json();
          document.dispatchEvent(new CustomEvent('cart:updated', { detail: { cart } }));
        } catch (error) {
          console.error('Error adding to cart:', error);
        } finally {
          quickAddForm.classList.remove('is-loading');
          setTimeout(() => { addBtn.disabled = false; }, 1500);
        }
      });
    }
  });
</script>

<script type="application/json" data-product-json-{{ section.id }}>{{ product | json }}</script>
<script type="application/json" data-included-meals-json-{{ section.id }}>
  {%- if included_meals != blank -%}
    {{ included_meals | map: 'title' | json }}
  {%- else -%}
    []
  {%- endif -%}
</script>

{% schema %}
{
  "name": "Product Main Meal Plan",
  "tag": "section",
  "class": "product-main-meal-plan-section"
}
{% endschema %}